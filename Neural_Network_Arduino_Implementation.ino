#include <MatrixMath.h>
#include <Servo.h>
Servo servo;
int angle = 0;
int temp = 0;
int temp2 = 0;
float C[1][20];
float C1[1][10];
float C2[1][1];
float Y[1][20];
float Y1[1][10];
float Y2[1][1];

  float weights1[2][20] = {{-9.8757213e-03,  3.7101995e-02,  2.6402008e-02, -1.6531077e-01,
        -2.3409881e-02,  3.7983395e-02, -2.2138469e-02, -5.3105457e-03,
         4.1584603e-02, -4.3952265e-03,  8.7230824e-02, -9.4193546e-03,
        -3.0385503e-01, -9.8083671e-03, -7.5595528e-03,  4.8635691e-02,
         9.6131861e-02,  3.7471611e-02, -8.4377117e-03, -3.5983401e-03},
       {-1.5747406e-03,  1.1155837e+00,  5.5858320e-01, -7.2373539e-02,
         1.3750453e-02, -1.0345671e+00,  1.4611459e-02, -1.8935082e-02,
        -1.2643583e+00, -2.5706021e-02, -7.2677892e-01, -9.7996660e-04,
        -1.1690076e-01, -3.7773199e-05, -6.2234863e-03,  6.0453939e-01,
        -8.3296579e-01, -5.5931622e-01, -5.0237994e-03, -1.2139502e-01}};
  float weights2[20][10] = {{ 0.9625109 , -1.9542315 , -0.7460988 ,  1.0800035 ,  0.6269228 ,
         2.097485  , -0.8196839 , -1.0965523 , -1.4345105 , -2.1166816 },
       {-1.5662237 ,  1.0603404 ,  1.0015447 , -0.9902283 , -1.3625872 ,
        -0.71386623,  1.0661093 ,  1.1885521 ,  1.4321189 ,  0.15739495},
       {-1.0337149 ,  0.17877728,  1.2516445 , -1.0442536 , -0.8483271 ,
        -0.37358454,  0.9678213 ,  1.0979747 ,  0.30943608,  0.01352366},
       { 5.853414  , -5.4928627 , -5.294188  ,  4.5343986 ,  5.208319  ,
         5.441079  , -5.0570874 , -5.031854  , -5.8062463 , -4.921304  },
       {-2.2331836 ,  1.8087455 ,  1.2706934 , -1.6789597 , -1.5849997 ,
        -1.5892214 ,  1.2963537 ,  1.6171924 ,  2.338222  ,  1.4198015 },
       {-0.770035  ,  0.3870168 ,  0.93204606, -0.7831572 , -1.0402739 ,
        -0.03547553,  1.0677121 ,  0.9909712 ,  0.5127903 ,  0.19805399},
       {-2.3544436 ,  1.8884804 ,  1.5761598 , -1.652067  , -1.2044494 ,
        -1.8613552 ,  1.6341285 ,  1.4245825 ,  2.210804  ,  1.2173407 },
       { 1.6350546 , -1.9184563 , -0.7924809 ,  0.7065058 ,  0.63342035,
         1.4216686 , -0.7605823 , -0.63946056, -1.0048056 , -1.6130654 },
       {-1.2514704 ,  0.37655696,  0.56077445, -0.6369273 , -0.693768  ,
        -0.48798072,  0.36717433,  0.8227287 ,  0.79594606,  0.07247926},
       { 1.6842154 , -1.4199218 , -1.0984415 ,  1.0042816 ,  0.7499775 ,
         1.7345998 , -0.94544894, -0.8474912 , -1.1730053 , -1.6724247 },
       {-0.18421285,  0.9157458 ,  1.5238634 , -0.7815289 , -1.2249464 ,
        -0.9359722 ,  0.9520259 ,  0.92639995,  0.82273537,  0.53630143},
       { 1.2017642 , -1.9160659 , -0.8466575 ,  1.4543713 ,  1.4270451 ,
         2.1146727 , -0.820802  , -1.0637432 , -2.1103613 , -1.9820513 },
       { 5.783704  , -5.737025  , -5.521888  ,  5.151011  ,  4.4995246 ,
         5.7678027 , -4.711965  , -5.367017  , -5.8568726 , -6.0869923 },
       { 0.6318682 , -1.3657392 , -0.7754177 ,  0.4988032 ,  0.54428256,
         1.7282778 , -0.7315327 , -0.77287114, -1.4939011 , -1.9011705 },
       { 1.1101527 , -1.4708841 , -1.4416659 ,  1.1690633 ,  0.75829417,
         1.6961172 , -0.8876899 , -0.57097685, -1.863782  , -1.683799  },
       {-0.67573565,  0.36055693,  1.2743974 , -1.5093489 , -0.9050116 ,
        -0.73690754,  1.2561231 ,  1.4150006 ,  0.7755413 ,  0.7014063 },
       {-0.2856173 ,  0.64648235,  0.96585095, -0.62352085, -1.2715434 ,
        -0.79091746,  1.256866  ,  0.6471782 ,  0.21092762,  0.80911005},
       {-0.98363537,  0.7347183 ,  1.0082991 , -1.2033474 , -1.6800562 ,
        -0.7717019 ,  1.0972502 ,  0.9971113 ,  0.4365724 ,  0.43199924},
       { 1.1392235 , -1.8680848 , -0.8011659 ,  0.70075464,  0.64237976,
         1.8635094 , -1.150187  , -1.1409013 , -1.7229174 , -1.1470525 },
       {-1.1279793 ,  1.9555537 ,  0.6663652 , -0.514544  , -1.4498295 ,
        -1.7824876 ,  1.0913033 ,  1.0082264 ,  0.997059  ,  2.0332873 }};
  float weights3[10][1] = {{-14.224638 },
       {  9.364629 },
       {  5.9113584},
       {-15.801158 },
       {-16.770931 },
       {-13.338055 },
       {  6.7714095},
       {  6.3848653},
       {  8.611333 },
       { 10.219721 }};
  float biases1[1][20] = {{ 1.6547253 , -1.0192518 ,  0.04714655,  2.6322467 , -0.2443912 ,
       -0.8179629 , -0.540215  ,  1.3382392 , -0.33943212,  1.4531049 ,
        0.18051623,  1.729613  ,  2.2224731 ,  1.4956576 ,  1.4947257 ,
       -0.25631595,  0.5422055 ,  0.5682629 ,  1.4247231 , -1.0543779 }};
  float biases2[1][10] = {{-0.33609366,  0.48678526,  0.56190896, -0.4740718 , -0.7048582 ,
       -0.4975205 ,  0.35427955,  0.46770424,  0.4053715 ,  0.3980683 }};
  float biases3[1][1] = {{-12.61889}};

float sigmoid(float z) {
  return 1/(1+exp(-z));
}

void apply(float* arr, int N) {
  for(int i=0; i<N; ++i) {
    arr[i] = sigmoid(arr[i]);
  }
}

void setup() {
Serial.begin(9600);
pinMode (3 , OUTPUT ) ;
    servo.attach(3); 
  
}

void loop() {

  int EMG_Sensor = analogRead(A2);
  
  int Difference = EMG_Sensor - temp;
  int temp = EMG_Sensor;
  
  float input[1][2] = {{EMG_Sensor, Difference}};

  Matrix.Multiply((float*)input, (float*)weights1, 1, 2, 20, (float*)C);
  Matrix.Add((float*)C, (float*)biases1, 1, 20, (float*)Y);
  apply((float*)Y, 20);
  Matrix.Multiply((float*)Y, (float*)weights2, 1, 20, 10, (float*)C1);
  Matrix.Add((float*)C1, (float*)biases2, 1, 10, (float*)Y1);
  apply((float*)Y1, 10);
  Matrix.Multiply((float*)Y1, (float*)weights3, 1, 10, 1, (float*)C2);
  Matrix.Add((float*)C2, (float*)biases3, 1, 1, (float*)Y2);
  
  angle = Y2[0][0]*-1;
    servo.write(angle); 
    temp2 = angle;
   

  Serial.print(EMG_Sensor); Serial.print(", ");
  Serial.print(angle); Serial.print(", ");
  Serial.println(angle - temp2);
  delay(1);
  }
